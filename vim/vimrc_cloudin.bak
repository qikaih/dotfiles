
"""""""""""""""""""""VUNDLE PLUGIN""""""""""""""""""""

Plugin 'guns/vim-clojure-highlight'

Plugin 'guns/vim-sexp'

Plugin 'guns/vim-clojure-static'

Plugin 'tpope/vim-fireplace'

Plugin 'kien/rainbow_parentheses.vim'

Plugin 'mattn/emmet-vim'

Plugin 'dhruvasagar/vim-table-mode'

Plugin 'gorodinskiy/vim-coloresque'

Plugin 'jelera/vim-javascript-syntax'

Plugin 'walm/jshint.vim'

Plugin 'moll/vim-node'

Plugin 'airblade/vim-gitgutter'

Plugin 'Yggdroot/indentLine'

Plugin 'nvie/vim-flake8'

if has('python')

Plugin 'davidhalter/jedi-vim'

Plugin 'axiaoxin/vim-json-line-format'

Plugin 'SirVer/ultisnips'

endif

Plugin 'axiaoxin/favorite-vim-colorscheme'

Plugin 'junegunn/vim-emoji'

Plugin 'mhinz/vim-startify'

Plugin 'terryma/vim-multiple-cursors'

Plugin 'suan/vim-instant-markdown'


Plugin 'honza/vim-snippets'

Plugin 'bling/vim-airline'


" 针对不同的文件类型采用不同的缩进格式

filetype plugin indent on


" Brief help

" :PluginList - lists configured plugins

" :PluginInstall - installs plugins; append `!` to update or just

" :PluginUpdate

" :PluginSearch foo - searches for foo; append `!` to refresh local cache

" :PluginClean - confirms removal of unused plugins; append `!` to

" auto-approve removal

"

" see :h vundle for more details or wiki for FAQ

" Put your non-Plugin stuff after this line



""""""""""""""""""""""BASE CONFIG"""""""""""""""""""""""


"""""""""""""""""""""""""KEY MAPPING""""""""""""""""""""


"映射切换buffer的键位

nnoremap [b :bp<CR>

nnoremap ]b :bn<CR>


" 映射切换tab的键位

nnoremap [t :tabp<CR>

nnoremap ]t :tabn<CR>


" normal模式下Ctrl+c全选并复制到系统剪贴板(linux必须装有vim-gnome)

nmap <C-c> gg"+yG


" visual模式下Ctrl+c复制选中内容到剪贴板

vmap <C-c> "+y


" Ctrl+v原样粘贴剪切板内容

inoremap <C-v> <ESC>"+pa


" w!!写入只读文件

cmap w!! w !sudo tee >/dev/null %:p


" F2切换行号显示

nnoremap <F2> :set nonu!<CR>:set foldcolumn=0<CR>


" F3打开目录树

nmap <silent> <F3> :NERDTreeToggle<CR>


" F4显示TagList

nmap <silent> <F4> :TagbarToggle<CR>


" F5运行脚本

if exists("$VIRTUAL_ENV")

autocmd FileType python map <buffer> <F5> :!$VIRTUAL_ENV'/bin/python'
%:p<CR>

else

autocmd FileType python map <buffer> <F5> :!python %:p<CR>

endif


" <F6> 新建标签页

map <F6> <Esc>:tabnew<CR>


" <F7> 拷贝粘贴代码不破坏缩进

set pastetoggle=<F7>


if has("win64") || has("win32")

" <F8> sort import and auto pep8

autocmd FileType python map <buffer> <F8> :!autopep8 -i -a
--ignore=W690,E501 %:p<CR><CR>

" <F9> pep8 by yapf

autocmd FileType python map <buffer> <F9> :!yapf -i %:p
--style=pep8<CR><CR>

else

" <F8> sort import and auto pep8

autocmd FileType python map <buffer> <F8> :!autopep8 -i -a
--ignore=W690,E501 %:p;isort %:p;<CR><CR>

" <F9> pep8 by yapf

autocmd FileType python map <buffer> <F9> :!yapf -i %:p --style=pep8;isort
%:p;<CR><CR>

endif


" 给当前单词添加引号

nnoremap w" viw<esc>a"<esc>hbi"<esc>lel

nnoremap w' viw<esc>a'<esc>hbi'<esc>lel


" 在Normal Mode和Visual/Select Mode下，利用Tab键和Shift-Tab键来缩进文本

nnoremap > >>

nnoremap < <<

vnoremap > >gv

vnoremap < <gv


" 左右分割窗口Ctrl+w +v

" 上下分割窗口Ctrl+w +s

" 关闭窗口Ctrl+w +q


" quicker window switching

nnoremap <C-h> <C-w>h

nnoremap <C-j> <C-w>j

nnoremap <C-k> <C-w>k

nnoremap <C-l> <C-w>l


" quicker window resize

nnoremap <C-Enter> <C-w>=

nnoremap <C-Left> <C-w><

nnoremap <C-Right> <C-w>>

nnoremap <C-Up> <C-w>+

nnoremap <C-Down> <C-w>-


" emoji

imap <C-e> <C-X><C-U>



""""""""""""""""""""""""""""""PLUGIN CONFIG""""""""""""""""""""""""""

NerdCommenter

let g:NERDSpaceDelims=1


" NERDTREE

" 不显示的文件

let NERDTreeIgnore=['\.pyc$', '\~$']

" show nerdtree when starts up

"autocmd vimenter * NERDTree

" 退出最后一个buff时也退出nerdtree

autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
b:NERDTreeType == "primary") | q | endif


" CtrlP

let g:ctrlp_show_hidden = 1

let g:ctrlp_cmd = 'CtrlPMixed'


"Ctrl-X Ctrl-U emoji补全

set completefunc=emoji#complete


" instant-markdown

let g:instant_markdown_slow = 1


" airline

let g:airline_section_y = '%{strftime("%H:%M")}'

" 开启tabline

let g:airline#extensions#tabline#enabled = 1

" tabline中当前buffer两端的分隔字符

let g:airline#extensions#tabline#left_sep = ' '

" tabline中未激活buffer两端的分隔字符

let g:airline#extensions#tabline#left_alt_sep = '|'

" tabline中buffer显示编号

let g:airline#extensions#tabline#buffer_nr_show = 1


" jedi

autocmd FileType python setlocal completeopt-=preview

let g:jedi#completions_command = "<C-n>"


" flake8

let g:flake8_show_in_file = 1

let g:flake8_show_in_gutter = 1

autocmd! BufRead,BufWritePost *.py call Flake8()


" gitgutter

let g:gitgutter_sign_modified = '*'

let g:gitgutter_sign_removed = '-'


" ultisnips

let g:UltiSnipsExpandTrigger="<tab>"

let g:UltiSnipsJumpForwardTrigger="<tab>"

let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" jshint

autocmd! BufRead,BufWritePost *.js :JSHint


" vim-table-mode: markdown

let g:table_mode_corner="|"


" rainbow_parentheses

let g:rbpt_colorpairs = [

\ ['brown', 'RoyalBlue3'],

\ ['Darkblue', 'SeaGreen3'],

\ ['darkgray', 'DarkOrchid3'],

\ ['darkgreen', 'firebrick3'],

\ ['darkcyan', 'RoyalBlue3'],

\ ['darkred', 'SeaGreen3'],

\ ['darkmagenta', 'DarkOrchid3'],

\ ['brown', 'firebrick3'],

\ ['gray', 'RoyalBlue3'],

\ ['darkmagenta', 'DarkOrchid3'],

\ ['Darkblue', 'firebrick3'],

\ ['darkgreen', 'RoyalBlue3'],

\ ['darkcyan', 'SeaGreen3'],

\ ['darkred', 'DarkOrchid3'],

\ ['red', 'firebrick3'],

\ ]


let g:rbpt_max = 16

let g:rbpt_loadcmd_toggle = 0

au VimEnter * RainbowParenthesesToggle

au Syntax * RainbowParenthesesLoadRound

au Syntax * RainbowParenthesesLoadSquare

au Syntax * RainbowParenthesesLoadBraces


" vim-clojure-static

let g:clojure_syntax_keywords = {

\ 'clojureMacro': ["defproject", "defcustom"],

\ 'clojureFunc': ["string/join", "string/replace"]

\ }


" vim-clojure-highlight

autocmd BufRead *.clj try | silent! Require | catch /^Fireplace/ | endtry


" vCoolor.vim

let g:vcoolor_map = '<leader>cp'

let g:vcool_ins_rgb_map = '<leader>cpr' " Insert rgb color.

let g:vcool_ins_hsl_map = '<leader>cph' " Insert hsl color.

let g:vcool_ins_rgba_map = '<leader>cpra' " Insert rgba color.



